class Solution {
public:
    int lb(vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1;
        int ans = nums.size(); // Initialize to size to handle "not found" case
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] >= target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    int ub(vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1;
        int ans = nums.size(); // Initialize to size to handle "not found" case
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] > target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int first = lb(nums, target);  
        if (first == nums.size() || nums[first] != target) {
            return {-1, -1};
        }
        int last = ub(nums, target) - 1;
        return {first, last};
    }
};
