class Solution {
public:
    bool canWePlace(vector<int> &stalls, int dist, int cows) {
        int n = stalls.size(); // size of array
        int cntCows = 1;       // first cow placed
        int last = stalls[0];  // position of last placed cow
        for (int i = 1; i < n; i++) {
            if (stalls[i] - last >= dist) {
                cntCows++;           // place next cow
                last = stalls[i];    // update last position
            }
            if (cntCows >= cows) return true;
        }
        return false;
    }

    int aggressiveCows(vector<int> &stalls, int k) {
        int n = stalls.size(); // size of array
        sort(stalls.begin(), stalls.end()); // sort stalls

        int low = 1, high = stalls[n - 1] - stalls[0];
        // apply binary search
        while (low <= high) {
            int mid = (low + high) / 2;
            if (canWePlace(stalls, mid, k)) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return high;
    }
};
